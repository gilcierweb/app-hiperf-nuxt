###### Builder ######
FROM node:24-alpine AS builder

LABEL maintainer="gilcierweb@gmail.com"

RUN apk --no-cache add openssh git bash build-base busybox ca-certificates curl

WORKDIR /app

COPY ./package.json /app
# COPY ./package-lock.json /app/
# COPY ./yarn.lock /app
COPY ./pnpm-lock.yaml /app

COPY . /app

# With NPM
# RUN npm install -g npm@latest
# RUN npm cache clean --force
# RUN npm install --legacy-peer-deps && npm cache clean --force
# RUN npm run build

# With Yarn
# RUN yarn --version
# RUN yarn cache clean
# RUN yarn install
# RUN yarn build --verbose

# With corepack and PNPM
RUN corepack enable
RUN corepack prepare pnpm@latest --activate
RUN pnpm --version
RUN pnpm install --frozen-lockfile --prod=false

RUN pnpm build --verbose --loglevel debug

RUN ls -laH && pwd

###### Release Production ######
FROM node:24-alpine AS release
RUN apk --no-cache add openssh git bash build-base busybox ca-certificates curl util-linux

WORKDIR /app

COPY --from=builder /app/.output /app/.output

RUN chmod -R 755 /app/.output

RUN ls -laH /app/.output/server

ENV NODE_ENV production

ENV HOST 0.0.0.0
ENV PORT 3000
EXPOSE 3000

ENTRYPOINT ["node", ".output/server/index.mjs"]

###### Release Production ######
# FROM node:24-alpine as release
# RUN apk --no-cache add openssh git bash build-base busybox ca-certificates curl util-linux

# # WORKDIR /app
# WORKDIR /app/app-nuxt

# COPY --from=builder /app/app-nuxt/.output /app/app-nuxt/.output

# # COPY --from=builder /app/.output /app/.output
# # COPY --from=builder /app/.output/server/index.mjs /app/.output/server/index.mjs

# RUN ls -laH /app/.output/server
# RUN ls -laH && pwd
# RUN ls -laH .output && pwd 
# RUN ls -laH .output/server && pwd 

# # COPY --from=builder /app/.output  app/.output
# # COPY --from=builder /app/.nuxt  app/.nuxt
# # COPY --from=builder /app/.output/  ./.output/
# RUN find /app -name index.mjs

# ENV HOST 0.0.0.0
# EXPOSE 3000
# # ENTRYPOINT ["sh", "-c", "find /app -name output/server/index.mjs && tail -f /dev/null"]
# # ENTRYPOINT ["sh", "-c", "ls -laH /app/.output/server && node .output/server/index.mjs"]
# # ENTRYPOINT ["node", ".output/server/index.mjs"]
# # ENTRYPOINT ["node", ".output/server/index.mjs"]
# # ENTRYPOINT ["sh", "-c", "ls -laH && node app-nuxt/.output/server/index.mjs"]
# # ENTRYPOINT ["node", ".output/server/index.mjs"]
# ENTRYPOINT ["sh", "-c", "ls -laH && node .output/server/index.mjs"]

# Stage 1: Builder
# Usa a imagem oficial do Node.js, com versão 24 e base Alpine, que é leve.
# FROM node:24-alpine AS builder

# LABEL maintainer="gilcierweb@gmail.com"

# # Instala pacotes necessários para o build.
# # 'build-base' para compilar dependências nativas.
# # 'git' e 'openssh' se tiver dependências privadas.
# # Removido 'busybox' pois não é essencial para o build.
# RUN apk add --no-cache openssh git bash build-base ca-certificates curl

# # Define o diretório de trabalho.
# WORKDIR /app

# # Copia apenas os arquivos de lock e package.json primeiro para otimizar o cache.
# COPY package.json pnpm-lock.yaml ./

# # Com corepack e PNPM
# RUN corepack enable
# RUN corepack prepare pnpm@latest --activate

# # Instala todas as dependências (incluindo dev para o build).
# RUN pnpm install --frozen-lockfile --prod=false

# # Copia o restante dos arquivos do projeto APÓS a instalação de dependências.
# COPY . .

# # Executa o build da aplicação Nuxt.
# # Redireciona o log para um arquivo e, em seguida, EXIBE o conteúdo do log.
# # Isso é CRUCIAL para depurarmos o erro real do build do Nitro.
# RUN pnpm run build --verbose --loglevel debug > /tmp/build_log.txt 2>&1 || true

# RUN cat /tmp/build_log.txt
# # Adiciona uma verificação de tamanho para forçar o build a falhar no Docker se o index.mjs for muito pequeno.



# # Stage 2: Release
# # Usa uma imagem Alpine menor e mais otimizada para o ambiente de execução.
# FROM node:24-alpine AS release

# # Instala apenas as dependências de tempo de execução (mínimo necessário).
# # 'ca-certificates' para HTTPS, 'curl' para health checks (opcional).
# # Removidos: openssh, git, bash, build-base, busybox, util-linux (não são necessários para rodar o app).
# RUN apk add --no-cache ca-certificates curl

# # Define o diretório de trabalho.
# WORKDIR /app

# # Copia APENAS o output de produção do estágio builder.
# # NÃO copie a pasta .nuxt, pois ela é de desenvolvimento.
# COPY --from=builder /app/.output /app/.output

# # Garante permissões de execução para os arquivos do servidor.
# RUN chmod -R 755 /app/.output

# # Verificação de depuração (manter para o próximo build)
# RUN echo "--- Conteúdo de /app/.output/server no release stage ---" && ls -laH /app/.output/server

# # Define variáveis de ambiente cruciais para o Nuxt em produção.
# ENV NODE_ENV production
# ENV HOST 0.0.0.0
# ENV PORT 3000

# EXPOSE 3000

# # Define o comando que será executado quando o contêiner iniciar.
# ENTRYPOINT ["node", ".output/server/index.mjs"]